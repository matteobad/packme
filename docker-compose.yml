services:
  app:
    build: .
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: "production"
      DATABASE_URL: ${DATABASE_URL}
      DATABASE_URL_EXTERNAL: ${DATABASE_URL_EXTERNAL}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      AUTH_URL: ${AUTH_URL}
      AUTH_SECRET: ${AUTH_SECRET}
      NEXT_PUBLIC_CLIENTVAR: ${NEXT_PUBLIC_CLIENTVAR}
    depends_on:
      - postgres
    networks:
      - acme_network

  postgres:
    image: "postgres:16.3-alpine"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - type: volume
        source: postgres_data
        target: /var/lib/postgresql/data
    networks:
      - acme_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pg_proxy:
    image: ghcr.io/neondatabase/wsproxy:latest
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      APPEND_PORT: "postgres:5432"
      ALLOW_ADDR_REGEX: ".*"
      LOG_TRAFFIC: "true"
    ports:
      - "5433:80"
    networks:
      - acme_network

  cron:
    image: alpine/curl
    command: >
      sh -c "
        echo '*/10 * * * * curl -X POST http://app:3000/api/db/clear' > /etc/crontabs/root && \
        crond -f -l 2
      "
    depends_on:
      - app
    networks:
      - acme_network

volumes:
  postgres_data:

networks:
  acme_network:
    name: acme_network
    driver: bridge
